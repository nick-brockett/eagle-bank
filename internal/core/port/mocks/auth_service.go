// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"eagle-bank.com/internal/core/domain/model"
	"eagle-bank.com/internal/core/port"
	"github.com/gin-gonic/gin"
	"sync"
)

// Ensure, that AuthServiceMock does implement port.AuthService.
// If this is not the case, regenerate this file with moq.
var _ port.AuthService = &AuthServiceMock{}

// AuthServiceMock is a mock implementation of port.AuthService.
//
//	func TestSomethingThatUsesAuthService(t *testing.T) {
//
//		// make and configure a mocked port.AuthService
//		mockedAuthService := &AuthServiceMock{
//			ExtractTokenIDFunc: func(c *gin.Context) (string, error) {
//				panic("mock out the ExtractTokenID method")
//			},
//			GenerateTokensFunc: func(userID string, role []string) (*model.TokenPair, error) {
//				panic("mock out the GenerateTokens method")
//			},
//			ValidateSetPasswordTokenFunc: func(c *gin.Context) error {
//				panic("mock out the ValidateSetPasswordToken method")
//			},
//			ValidateTokenFunc: func(c *gin.Context) error {
//				panic("mock out the ValidateToken method")
//			},
//		}
//
//		// use mockedAuthService in code that requires port.AuthService
//		// and then make assertions.
//
//	}
type AuthServiceMock struct {
	// ExtractTokenIDFunc mocks the ExtractTokenID method.
	ExtractTokenIDFunc func(c *gin.Context) (string, error)

	// GenerateTokensFunc mocks the GenerateTokens method.
	GenerateTokensFunc func(userID string, role []string) (*model.TokenPair, error)

	// ValidateSetPasswordTokenFunc mocks the ValidateSetPasswordToken method.
	ValidateSetPasswordTokenFunc func(c *gin.Context) error

	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(c *gin.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// ExtractTokenID holds details about calls to the ExtractTokenID method.
		ExtractTokenID []struct {
			// C is the c argument value.
			C *gin.Context
		}
		// GenerateTokens holds details about calls to the GenerateTokens method.
		GenerateTokens []struct {
			// UserID is the userID argument value.
			UserID string
			// Role is the role argument value.
			Role []string
		}
		// ValidateSetPasswordToken holds details about calls to the ValidateSetPasswordToken method.
		ValidateSetPasswordToken []struct {
			// C is the c argument value.
			C *gin.Context
		}
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// C is the c argument value.
			C *gin.Context
		}
	}
	lockExtractTokenID           sync.RWMutex
	lockGenerateTokens           sync.RWMutex
	lockValidateSetPasswordToken sync.RWMutex
	lockValidateToken            sync.RWMutex
}

// ExtractTokenID calls ExtractTokenIDFunc.
func (mock *AuthServiceMock) ExtractTokenID(c *gin.Context) (string, error) {
	if mock.ExtractTokenIDFunc == nil {
		panic("AuthServiceMock.ExtractTokenIDFunc: method is nil but AuthService.ExtractTokenID was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockExtractTokenID.Lock()
	mock.calls.ExtractTokenID = append(mock.calls.ExtractTokenID, callInfo)
	mock.lockExtractTokenID.Unlock()
	return mock.ExtractTokenIDFunc(c)
}

// ExtractTokenIDCalls gets all the calls that were made to ExtractTokenID.
// Check the length with:
//
//	len(mockedAuthService.ExtractTokenIDCalls())
func (mock *AuthServiceMock) ExtractTokenIDCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockExtractTokenID.RLock()
	calls = mock.calls.ExtractTokenID
	mock.lockExtractTokenID.RUnlock()
	return calls
}

// GenerateTokens calls GenerateTokensFunc.
func (mock *AuthServiceMock) GenerateTokens(userID string, role []string) (*model.TokenPair, error) {
	if mock.GenerateTokensFunc == nil {
		panic("AuthServiceMock.GenerateTokensFunc: method is nil but AuthService.GenerateTokens was just called")
	}
	callInfo := struct {
		UserID string
		Role   []string
	}{
		UserID: userID,
		Role:   role,
	}
	mock.lockGenerateTokens.Lock()
	mock.calls.GenerateTokens = append(mock.calls.GenerateTokens, callInfo)
	mock.lockGenerateTokens.Unlock()
	return mock.GenerateTokensFunc(userID, role)
}

// GenerateTokensCalls gets all the calls that were made to GenerateTokens.
// Check the length with:
//
//	len(mockedAuthService.GenerateTokensCalls())
func (mock *AuthServiceMock) GenerateTokensCalls() []struct {
	UserID string
	Role   []string
} {
	var calls []struct {
		UserID string
		Role   []string
	}
	mock.lockGenerateTokens.RLock()
	calls = mock.calls.GenerateTokens
	mock.lockGenerateTokens.RUnlock()
	return calls
}

// ValidateSetPasswordToken calls ValidateSetPasswordTokenFunc.
func (mock *AuthServiceMock) ValidateSetPasswordToken(c *gin.Context) error {
	if mock.ValidateSetPasswordTokenFunc == nil {
		panic("AuthServiceMock.ValidateSetPasswordTokenFunc: method is nil but AuthService.ValidateSetPasswordToken was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockValidateSetPasswordToken.Lock()
	mock.calls.ValidateSetPasswordToken = append(mock.calls.ValidateSetPasswordToken, callInfo)
	mock.lockValidateSetPasswordToken.Unlock()
	return mock.ValidateSetPasswordTokenFunc(c)
}

// ValidateSetPasswordTokenCalls gets all the calls that were made to ValidateSetPasswordToken.
// Check the length with:
//
//	len(mockedAuthService.ValidateSetPasswordTokenCalls())
func (mock *AuthServiceMock) ValidateSetPasswordTokenCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockValidateSetPasswordToken.RLock()
	calls = mock.calls.ValidateSetPasswordToken
	mock.lockValidateSetPasswordToken.RUnlock()
	return calls
}

// ValidateToken calls ValidateTokenFunc.
func (mock *AuthServiceMock) ValidateToken(c *gin.Context) error {
	if mock.ValidateTokenFunc == nil {
		panic("AuthServiceMock.ValidateTokenFunc: method is nil but AuthService.ValidateToken was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	return mock.ValidateTokenFunc(c)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//
//	len(mockedAuthService.ValidateTokenCalls())
func (mock *AuthServiceMock) ValidateTokenCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
