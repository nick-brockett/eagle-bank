// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"eagle-bank.com/internal/core/domain/model"
	"eagle-bank.com/internal/core/port"
	"sync"
)

// Ensure, that UserServiceMock does implement port.UserService.
// If this is not the case, regenerate this file with moq.
var _ port.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of port.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked port.UserService
//		mockedUserService := &UserServiceMock{
//			CreateUserFunc: func(user *model.NewUser) (*model.User, error) {
//				panic("mock out the CreateUser method")
//			},
//			GetUserByEmailVerificationTokenFunc: func(emailToken string) (*model.User, error) {
//				panic("mock out the GetUserByEmailVerificationToken method")
//			},
//			GetUserByIDFunc: func(id string) (*model.User, error) {
//				panic("mock out the GetUserByID method")
//			},
//			LoginFunc: func(email string, password string) (*model.User, error) {
//				panic("mock out the Login method")
//			},
//			SetPasswordFunc: func(user *model.User, password string) error {
//				panic("mock out the SetPassword method")
//			},
//			VerifyEmailFunc: func(emailToken string) error {
//				panic("mock out the VerifyEmail method")
//			},
//		}
//
//		// use mockedUserService in code that requires port.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *model.NewUser) (*model.User, error)

	// GetUserByEmailVerificationTokenFunc mocks the GetUserByEmailVerificationToken method.
	GetUserByEmailVerificationTokenFunc func(emailToken string) (*model.User, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id string) (*model.User, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(email string, password string) (*model.User, error)

	// SetPasswordFunc mocks the SetPassword method.
	SetPasswordFunc func(user *model.User, password string) error

	// VerifyEmailFunc mocks the VerifyEmail method.
	VerifyEmailFunc func(emailToken string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *model.NewUser
		}
		// GetUserByEmailVerificationToken holds details about calls to the GetUserByEmailVerificationToken method.
		GetUserByEmailVerificationToken []struct {
			// EmailToken is the emailToken argument value.
			EmailToken string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID string
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
		}
		// SetPassword holds details about calls to the SetPassword method.
		SetPassword []struct {
			// User is the user argument value.
			User *model.User
			// Password is the password argument value.
			Password string
		}
		// VerifyEmail holds details about calls to the VerifyEmail method.
		VerifyEmail []struct {
			// EmailToken is the emailToken argument value.
			EmailToken string
		}
	}
	lockCreateUser                      sync.RWMutex
	lockGetUserByEmailVerificationToken sync.RWMutex
	lockGetUserByID                     sync.RWMutex
	lockLogin                           sync.RWMutex
	lockSetPassword                     sync.RWMutex
	lockVerifyEmail                     sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserServiceMock) CreateUser(user *model.NewUser) (*model.User, error) {
	if mock.CreateUserFunc == nil {
		panic("UserServiceMock.CreateUserFunc: method is nil but UserService.CreateUser was just called")
	}
	callInfo := struct {
		User *model.NewUser
	}{
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserService.CreateUserCalls())
func (mock *UserServiceMock) CreateUserCalls() []struct {
	User *model.NewUser
} {
	var calls []struct {
		User *model.NewUser
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// GetUserByEmailVerificationToken calls GetUserByEmailVerificationTokenFunc.
func (mock *UserServiceMock) GetUserByEmailVerificationToken(emailToken string) (*model.User, error) {
	if mock.GetUserByEmailVerificationTokenFunc == nil {
		panic("UserServiceMock.GetUserByEmailVerificationTokenFunc: method is nil but UserService.GetUserByEmailVerificationToken was just called")
	}
	callInfo := struct {
		EmailToken string
	}{
		EmailToken: emailToken,
	}
	mock.lockGetUserByEmailVerificationToken.Lock()
	mock.calls.GetUserByEmailVerificationToken = append(mock.calls.GetUserByEmailVerificationToken, callInfo)
	mock.lockGetUserByEmailVerificationToken.Unlock()
	return mock.GetUserByEmailVerificationTokenFunc(emailToken)
}

// GetUserByEmailVerificationTokenCalls gets all the calls that were made to GetUserByEmailVerificationToken.
// Check the length with:
//
//	len(mockedUserService.GetUserByEmailVerificationTokenCalls())
func (mock *UserServiceMock) GetUserByEmailVerificationTokenCalls() []struct {
	EmailToken string
} {
	var calls []struct {
		EmailToken string
	}
	mock.lockGetUserByEmailVerificationToken.RLock()
	calls = mock.calls.GetUserByEmailVerificationToken
	mock.lockGetUserByEmailVerificationToken.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *UserServiceMock) GetUserByID(id string) (*model.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("UserServiceMock.GetUserByIDFunc: method is nil but UserService.GetUserByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//
//	len(mockedUserService.GetUserByIDCalls())
func (mock *UserServiceMock) GetUserByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *UserServiceMock) Login(email string, password string) (*model.User, error) {
	if mock.LoginFunc == nil {
		panic("UserServiceMock.LoginFunc: method is nil but UserService.Login was just called")
	}
	callInfo := struct {
		Email    string
		Password string
	}{
		Email:    email,
		Password: password,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(email, password)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//
//	len(mockedUserService.LoginCalls())
func (mock *UserServiceMock) LoginCalls() []struct {
	Email    string
	Password string
} {
	var calls []struct {
		Email    string
		Password string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// SetPassword calls SetPasswordFunc.
func (mock *UserServiceMock) SetPassword(user *model.User, password string) error {
	if mock.SetPasswordFunc == nil {
		panic("UserServiceMock.SetPasswordFunc: method is nil but UserService.SetPassword was just called")
	}
	callInfo := struct {
		User     *model.User
		Password string
	}{
		User:     user,
		Password: password,
	}
	mock.lockSetPassword.Lock()
	mock.calls.SetPassword = append(mock.calls.SetPassword, callInfo)
	mock.lockSetPassword.Unlock()
	return mock.SetPasswordFunc(user, password)
}

// SetPasswordCalls gets all the calls that were made to SetPassword.
// Check the length with:
//
//	len(mockedUserService.SetPasswordCalls())
func (mock *UserServiceMock) SetPasswordCalls() []struct {
	User     *model.User
	Password string
} {
	var calls []struct {
		User     *model.User
		Password string
	}
	mock.lockSetPassword.RLock()
	calls = mock.calls.SetPassword
	mock.lockSetPassword.RUnlock()
	return calls
}

// VerifyEmail calls VerifyEmailFunc.
func (mock *UserServiceMock) VerifyEmail(emailToken string) error {
	if mock.VerifyEmailFunc == nil {
		panic("UserServiceMock.VerifyEmailFunc: method is nil but UserService.VerifyEmail was just called")
	}
	callInfo := struct {
		EmailToken string
	}{
		EmailToken: emailToken,
	}
	mock.lockVerifyEmail.Lock()
	mock.calls.VerifyEmail = append(mock.calls.VerifyEmail, callInfo)
	mock.lockVerifyEmail.Unlock()
	return mock.VerifyEmailFunc(emailToken)
}

// VerifyEmailCalls gets all the calls that were made to VerifyEmail.
// Check the length with:
//
//	len(mockedUserService.VerifyEmailCalls())
func (mock *UserServiceMock) VerifyEmailCalls() []struct {
	EmailToken string
} {
	var calls []struct {
		EmailToken string
	}
	mock.lockVerifyEmail.RLock()
	calls = mock.calls.VerifyEmail
	mock.lockVerifyEmail.RUnlock()
	return calls
}
